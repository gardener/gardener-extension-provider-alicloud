version: "2"
run:
  concurrency: 4
linters:
  enable:
    - ginkgolinter
    - importas
    - misspell
    - nilerr
    - revive
    - unconvert
    # - unparam
    - whitespace
  settings:
    loggercheck:
      require-string-key: true
      no-printf-like: true
    misspell:
      mode: restricted # only check comments
    revive:
      rules:
        - name: duplicated-imports
        - name: unused-parameter
        - name: unreachable-code
        - name: context-as-argument
        - name: early-return
        - name: exported
  exclusions:
    generated: lax
    rules:
      - linters:
          - staticcheck
        text: 'SA1019:' # Excludes messages where deprecated variables are used
      - linters:
          - staticcheck
        text: 'ST1001:' # should not use dot imports
      # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
      - path: (.+)\.go$
        text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
      # revive:
      - path: (.+)\.go$
        text: var-naming # ((var|const|struct field|func) .* should be .*
      - path: (.+)\.go$
        text: dot-imports # should not use dot imports
      - path: (.+)\.go$
        text: package-comments # package comment should be of the form
      - path: (.+)\.go$
        text: unexported-return # exported func .* returns unexported type .*, which can be annoying to use
      - path: (.+)\.go$
        text: indent-error-flow # if block ends with a return statement, so drop this else and outdent its block
      - path: (.+)\.go$
        text: 'exported: (type|func) name will be used as .* by other packages, and that stutters;'
      - path: (.+)\.go$
        text: exported function Convert_.* should have comment or be unexported
      - path: (.+)\.go$
        text: redundant-import-alias
      # typecheck:
      - path: (.+)\.go$
        text: 'undeclared name: `.*`'
      - path: (.+)\.go$
        text: '".*" imported but not used'
      # allow non-capitalized messages if they start with technical terms
      - path: (.+)\.go$
        text: 'structured logging message should be capitalized: "garden(er-apiserver|er-controller-manager|er-admission-controller|er-operator|er-resource-manager|let)'
    paths:
      - zz_generated\..*\.go$
      - examples$
formatters: # how code formatting is handled
  settings:
    gofmt:
      rewrite-rules:
        - pattern: interface{}
          replacement: any
  exclusions:
    generated: lax
    paths:
      - examples$
issues:
  max-issues-per-linter: 0 # A value of 0 means no limit
  max-same-issues: 0 # A value of 0 means no limit