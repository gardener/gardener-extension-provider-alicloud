// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-alicloud/pkg/alicloud/client (interfaces: ClientFactory,ECS,STS,SLB,VPC,OSS,RAM,ROS)
//
// Generated by this command:
//
//	mockgen -package=client -destination=mocks.go github.com/gardener/gardener-extension-provider-alicloud/pkg/alicloud/client ClientFactory,ECS,STS,SLB,VPC,OSS,RAM,ROS
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	ecs "github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	resourcemanager "github.com/aliyun/alibaba-cloud-sdk-go/services/resourcemanager"
	vpc "github.com/aliyun/alibaba-cloud-sdk-go/services/vpc"
	oss "github.com/aliyun/aliyun-oss-go-sdk/oss"
	client "github.com/gardener/gardener-extension-provider-alicloud/pkg/alicloud/client"
	ros "github.com/gardener/gardener-extension-provider-alicloud/pkg/alicloud/client/ros"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	client0 "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
	isgomock struct{}
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// NewDNSClient mocks base method.
func (m *MockClientFactory) NewDNSClient(region, accessKeyID, accessKeySecret string) (client.DNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDNSClient", region, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDNSClient indicates an expected call of NewDNSClient.
func (mr *MockClientFactoryMockRecorder) NewDNSClient(region, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDNSClient", reflect.TypeOf((*MockClientFactory)(nil).NewDNSClient), region, accessKeyID, accessKeySecret)
}

// NewECSClient mocks base method.
func (m *MockClientFactory) NewECSClient(region, accessKeyID, accessKeySecret string) (client.ECS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewECSClient", region, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.ECS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewECSClient indicates an expected call of NewECSClient.
func (mr *MockClientFactoryMockRecorder) NewECSClient(region, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewECSClient", reflect.TypeOf((*MockClientFactory)(nil).NewECSClient), region, accessKeyID, accessKeySecret)
}

// NewOSSClient mocks base method.
func (m *MockClientFactory) NewOSSClient(endpoint, accessKeyID, accessKeySecret string) (client.OSS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOSSClient", endpoint, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.OSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOSSClient indicates an expected call of NewOSSClient.
func (mr *MockClientFactoryMockRecorder) NewOSSClient(endpoint, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOSSClient", reflect.TypeOf((*MockClientFactory)(nil).NewOSSClient), endpoint, accessKeyID, accessKeySecret)
}

// NewOSSClientFromSecretRef mocks base method.
func (m *MockClientFactory) NewOSSClientFromSecretRef(ctx context.Context, c client0.Client, secretRef *v1.SecretReference, region string) (client.OSS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOSSClientFromSecretRef", ctx, c, secretRef, region)
	ret0, _ := ret[0].(client.OSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOSSClientFromSecretRef indicates an expected call of NewOSSClientFromSecretRef.
func (mr *MockClientFactoryMockRecorder) NewOSSClientFromSecretRef(ctx, c, secretRef, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOSSClientFromSecretRef", reflect.TypeOf((*MockClientFactory)(nil).NewOSSClientFromSecretRef), ctx, c, secretRef, region)
}

// NewRAMClient mocks base method.
func (m *MockClientFactory) NewRAMClient(region, accessKeyID, accessKeySecret string) (client.RAM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRAMClient", region, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.RAM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRAMClient indicates an expected call of NewRAMClient.
func (mr *MockClientFactoryMockRecorder) NewRAMClient(region, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRAMClient", reflect.TypeOf((*MockClientFactory)(nil).NewRAMClient), region, accessKeyID, accessKeySecret)
}

// NewROSClient mocks base method.
func (m *MockClientFactory) NewROSClient(region, accessKeyID, accessKeySecret string) (client.ROS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewROSClient", region, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.ROS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewROSClient indicates an expected call of NewROSClient.
func (mr *MockClientFactoryMockRecorder) NewROSClient(region, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewROSClient", reflect.TypeOf((*MockClientFactory)(nil).NewROSClient), region, accessKeyID, accessKeySecret)
}

// NewSLBClient mocks base method.
func (m *MockClientFactory) NewSLBClient(region, accessKeyID, accessKeySecret string) (client.SLB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSLBClient", region, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.SLB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSLBClient indicates an expected call of NewSLBClient.
func (mr *MockClientFactoryMockRecorder) NewSLBClient(region, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSLBClient", reflect.TypeOf((*MockClientFactory)(nil).NewSLBClient), region, accessKeyID, accessKeySecret)
}

// NewSTSClient mocks base method.
func (m *MockClientFactory) NewSTSClient(region, accessKeyID, accessKeySecret string) (client.STS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSTSClient", region, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.STS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSTSClient indicates an expected call of NewSTSClient.
func (mr *MockClientFactoryMockRecorder) NewSTSClient(region, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSTSClient", reflect.TypeOf((*MockClientFactory)(nil).NewSTSClient), region, accessKeyID, accessKeySecret)
}

// NewVPCClient mocks base method.
func (m *MockClientFactory) NewVPCClient(region, accessKeyID, accessKeySecret string) (client.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVPCClient", region, accessKeyID, accessKeySecret)
	ret0, _ := ret[0].(client.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewVPCClient indicates an expected call of NewVPCClient.
func (mr *MockClientFactoryMockRecorder) NewVPCClient(region, accessKeyID, accessKeySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVPCClient", reflect.TypeOf((*MockClientFactory)(nil).NewVPCClient), region, accessKeyID, accessKeySecret)
}

// MockECS is a mock of ECS interface.
type MockECS struct {
	ctrl     *gomock.Controller
	recorder *MockECSMockRecorder
	isgomock struct{}
}

// MockECSMockRecorder is the mock recorder for MockECS.
type MockECSMockRecorder struct {
	mock *MockECS
}

// NewMockECS creates a new mock instance.
func NewMockECS(ctrl *gomock.Controller) *MockECS {
	mock := &MockECS{ctrl: ctrl}
	mock.recorder = &MockECSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECS) EXPECT() *MockECSMockRecorder {
	return m.recorder
}

// AllocatePublicIp mocks base method.
func (m *MockECS) AllocatePublicIp(id string) (*ecs.AllocatePublicIpAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePublicIp", id)
	ret0, _ := ret[0].(*ecs.AllocatePublicIpAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePublicIp indicates an expected call of AllocatePublicIp.
func (mr *MockECSMockRecorder) AllocatePublicIp(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePublicIp", reflect.TypeOf((*MockECS)(nil).AllocatePublicIp), id)
}

// AuthorizeSecurityGroup mocks base method.
func (m *MockECS) AuthorizeSecurityGroup(request *ecs.AuthorizeSecurityGroupRequest) (*ecs.AuthorizeSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeSecurityGroup", request)
	ret0, _ := ret[0].(*ecs.AuthorizeSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeSecurityGroup indicates an expected call of AuthorizeSecurityGroup.
func (mr *MockECSMockRecorder) AuthorizeSecurityGroup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeSecurityGroup", reflect.TypeOf((*MockECS)(nil).AuthorizeSecurityGroup), request)
}

// AuthorizeSecurityGroupEgress mocks base method.
func (m *MockECS) AuthorizeSecurityGroupEgress(request *ecs.AuthorizeSecurityGroupEgressRequest) (*ecs.AuthorizeSecurityGroupEgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeSecurityGroupEgress", request)
	ret0, _ := ret[0].(*ecs.AuthorizeSecurityGroupEgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeSecurityGroupEgress indicates an expected call of AuthorizeSecurityGroupEgress.
func (mr *MockECSMockRecorder) AuthorizeSecurityGroupEgress(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeSecurityGroupEgress", reflect.TypeOf((*MockECS)(nil).AuthorizeSecurityGroupEgress), request)
}

// CheckIfImageExists mocks base method.
func (m *MockECS) CheckIfImageExists(imageID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfImageExists", imageID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfImageExists indicates an expected call of CheckIfImageExists.
func (mr *MockECSMockRecorder) CheckIfImageExists(imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfImageExists", reflect.TypeOf((*MockECS)(nil).CheckIfImageExists), imageID)
}

// CheckIfImageOwnedByAliCloud mocks base method.
func (m *MockECS) CheckIfImageOwnedByAliCloud(imageID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfImageOwnedByAliCloud", imageID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfImageOwnedByAliCloud indicates an expected call of CheckIfImageOwnedByAliCloud.
func (mr *MockECSMockRecorder) CheckIfImageOwnedByAliCloud(imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfImageOwnedByAliCloud", reflect.TypeOf((*MockECS)(nil).CheckIfImageOwnedByAliCloud), imageID)
}

// CreateEgressRule mocks base method.
func (m *MockECS) CreateEgressRule(request *ecs.AuthorizeSecurityGroupEgressRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEgressRule", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEgressRule indicates an expected call of CreateEgressRule.
func (mr *MockECSMockRecorder) CreateEgressRule(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEgressRule", reflect.TypeOf((*MockECS)(nil).CreateEgressRule), request)
}

// CreateIngressRule mocks base method.
func (m *MockECS) CreateIngressRule(request *ecs.AuthorizeSecurityGroupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngressRule", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIngressRule indicates an expected call of CreateIngressRule.
func (mr *MockECSMockRecorder) CreateIngressRule(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngressRule", reflect.TypeOf((*MockECS)(nil).CreateIngressRule), request)
}

// CreateInstances mocks base method.
func (m *MockECS) CreateInstances(instanceName, securityGroupID, imageID, vSwitchId, zoneID, instanceTypeID, userData string) (*ecs.RunInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstances", instanceName, securityGroupID, imageID, vSwitchId, zoneID, instanceTypeID, userData)
	ret0, _ := ret[0].(*ecs.RunInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstances indicates an expected call of CreateInstances.
func (mr *MockECSMockRecorder) CreateInstances(instanceName, securityGroupID, imageID, vSwitchId, zoneID, instanceTypeID, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstances", reflect.TypeOf((*MockECS)(nil).CreateInstances), instanceName, securityGroupID, imageID, vSwitchId, zoneID, instanceTypeID, userData)
}

// CreateSecurityGroup mocks base method.
func (m *MockECS) CreateSecurityGroup(request *ecs.CreateSecurityGroupRequest) (*ecs.CreateSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", request)
	ret0, _ := ret[0].(*ecs.CreateSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockECSMockRecorder) CreateSecurityGroup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockECS)(nil).CreateSecurityGroup), request)
}

// CreateSecurityGroups mocks base method.
func (m *MockECS) CreateSecurityGroups(vpcId, name string) (*ecs.CreateSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroups", vpcId, name)
	ret0, _ := ret[0].(*ecs.CreateSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroups indicates an expected call of CreateSecurityGroups.
func (mr *MockECSMockRecorder) CreateSecurityGroups(vpcId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroups", reflect.TypeOf((*MockECS)(nil).CreateSecurityGroups), vpcId, name)
}

// DeleteInstances mocks base method.
func (m *MockECS) DeleteInstances(id string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstances", id, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstances indicates an expected call of DeleteInstances.
func (mr *MockECSMockRecorder) DeleteInstances(id, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstances", reflect.TypeOf((*MockECS)(nil).DeleteInstances), id, force)
}

// DeleteSecurityGroup mocks base method.
func (m *MockECS) DeleteSecurityGroup(request *ecs.DeleteSecurityGroupRequest) (*ecs.DeleteSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", request)
	ret0, _ := ret[0].(*ecs.DeleteSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockECSMockRecorder) DeleteSecurityGroup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockECS)(nil).DeleteSecurityGroup), request)
}

// DeleteSecurityGroups mocks base method.
func (m *MockECS) DeleteSecurityGroups(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroups", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroups indicates an expected call of DeleteSecurityGroups.
func (mr *MockECSMockRecorder) DeleteSecurityGroups(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroups", reflect.TypeOf((*MockECS)(nil).DeleteSecurityGroups), id)
}

// DescribeKeyPairs mocks base method.
func (m *MockECS) DescribeKeyPairs(request *ecs.DescribeKeyPairsRequest) (*ecs.DescribeKeyPairsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKeyPairs", request)
	ret0, _ := ret[0].(*ecs.DescribeKeyPairsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeyPairs indicates an expected call of DescribeKeyPairs.
func (mr *MockECSMockRecorder) DescribeKeyPairs(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyPairs", reflect.TypeOf((*MockECS)(nil).DescribeKeyPairs), request)
}

// DescribeSecurityGroupAttribute mocks base method.
func (m *MockECS) DescribeSecurityGroupAttribute(request *ecs.DescribeSecurityGroupAttributeRequest) (*ecs.DescribeSecurityGroupAttributeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSecurityGroupAttribute", request)
	ret0, _ := ret[0].(*ecs.DescribeSecurityGroupAttributeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroupAttribute indicates an expected call of DescribeSecurityGroupAttribute.
func (mr *MockECSMockRecorder) DescribeSecurityGroupAttribute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroupAttribute", reflect.TypeOf((*MockECS)(nil).DescribeSecurityGroupAttribute), request)
}

// DescribeSecurityGroups mocks base method.
func (m *MockECS) DescribeSecurityGroups(request *ecs.DescribeSecurityGroupsRequest) (*ecs.DescribeSecurityGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSecurityGroups", request)
	ret0, _ := ret[0].(*ecs.DescribeSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroups indicates an expected call of DescribeSecurityGroups.
func (mr *MockECSMockRecorder) DescribeSecurityGroups(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroups", reflect.TypeOf((*MockECS)(nil).DescribeSecurityGroups), request)
}

// DetachECSInstancesFromSSHKeyPair mocks base method.
func (m *MockECS) DetachECSInstancesFromSSHKeyPair(keyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachECSInstancesFromSSHKeyPair", keyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachECSInstancesFromSSHKeyPair indicates an expected call of DetachECSInstancesFromSSHKeyPair.
func (mr *MockECSMockRecorder) DetachECSInstancesFromSSHKeyPair(keyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachECSInstancesFromSSHKeyPair", reflect.TypeOf((*MockECS)(nil).DetachECSInstancesFromSSHKeyPair), keyName)
}

// GetAvailableInstanceType mocks base method.
func (m *MockECS) GetAvailableInstanceType(core int, zoneID string) (*ecs.DescribeAvailableResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableInstanceType", core, zoneID)
	ret0, _ := ret[0].(*ecs.DescribeAvailableResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableInstanceType indicates an expected call of GetAvailableInstanceType.
func (mr *MockECSMockRecorder) GetAvailableInstanceType(core, zoneID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableInstanceType", reflect.TypeOf((*MockECS)(nil).GetAvailableInstanceType), core, zoneID)
}

// GetImageInfo mocks base method.
func (m *MockECS) GetImageInfo(imageID string) (*ecs.DescribeImagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageInfo", imageID)
	ret0, _ := ret[0].(*ecs.DescribeImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageInfo indicates an expected call of GetImageInfo.
func (mr *MockECSMockRecorder) GetImageInfo(imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageInfo", reflect.TypeOf((*MockECS)(nil).GetImageInfo), imageID)
}

// GetInstances mocks base method.
func (m *MockECS) GetInstances(name string) (*ecs.DescribeInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", name)
	ret0, _ := ret[0].(*ecs.DescribeInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockECSMockRecorder) GetInstances(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockECS)(nil).GetInstances), name)
}

// GetSecurityGroup mocks base method.
func (m *MockECS) GetSecurityGroup(name string) (*ecs.DescribeSecurityGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", name)
	ret0, _ := ret[0].(*ecs.DescribeSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockECSMockRecorder) GetSecurityGroup(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockECS)(nil).GetSecurityGroup), name)
}

// GetSecurityGroupWithID mocks base method.
func (m *MockECS) GetSecurityGroupWithID(id string) (*ecs.DescribeSecurityGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupWithID", id)
	ret0, _ := ret[0].(*ecs.DescribeSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupWithID indicates an expected call of GetSecurityGroupWithID.
func (mr *MockECSMockRecorder) GetSecurityGroupWithID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupWithID", reflect.TypeOf((*MockECS)(nil).GetSecurityGroupWithID), id)
}

// ListAllInstanceType mocks base method.
func (m *MockECS) ListAllInstanceType() (*ecs.DescribeInstanceTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllInstanceType")
	ret0, _ := ret[0].(*ecs.DescribeInstanceTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllInstanceType indicates an expected call of ListAllInstanceType.
func (mr *MockECSMockRecorder) ListAllInstanceType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllInstanceType", reflect.TypeOf((*MockECS)(nil).ListAllInstanceType))
}

// ListTagResources mocks base method.
func (m *MockECS) ListTagResources(request *ecs.ListTagResourcesRequest) (*ecs.ListTagResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagResources", request)
	ret0, _ := ret[0].(*ecs.ListTagResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagResources indicates an expected call of ListTagResources.
func (mr *MockECSMockRecorder) ListTagResources(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagResources", reflect.TypeOf((*MockECS)(nil).ListTagResources), request)
}

// RevokeEgressRule mocks base method.
func (m *MockECS) RevokeEgressRule(request *ecs.RevokeSecurityGroupEgressRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeEgressRule", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeEgressRule indicates an expected call of RevokeEgressRule.
func (mr *MockECSMockRecorder) RevokeEgressRule(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeEgressRule", reflect.TypeOf((*MockECS)(nil).RevokeEgressRule), request)
}

// RevokeIngressRule mocks base method.
func (m *MockECS) RevokeIngressRule(request *ecs.RevokeSecurityGroupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeIngressRule", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeIngressRule indicates an expected call of RevokeIngressRule.
func (mr *MockECSMockRecorder) RevokeIngressRule(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIngressRule", reflect.TypeOf((*MockECS)(nil).RevokeIngressRule), request)
}

// RevokeSecurityGroup mocks base method.
func (m *MockECS) RevokeSecurityGroup(request *ecs.RevokeSecurityGroupRequest) (*ecs.RevokeSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecurityGroup", request)
	ret0, _ := ret[0].(*ecs.RevokeSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeSecurityGroup indicates an expected call of RevokeSecurityGroup.
func (mr *MockECSMockRecorder) RevokeSecurityGroup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecurityGroup", reflect.TypeOf((*MockECS)(nil).RevokeSecurityGroup), request)
}

// RevokeSecurityGroupEgress mocks base method.
func (m *MockECS) RevokeSecurityGroupEgress(request *ecs.RevokeSecurityGroupEgressRequest) (*ecs.RevokeSecurityGroupEgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecurityGroupEgress", request)
	ret0, _ := ret[0].(*ecs.RevokeSecurityGroupEgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeSecurityGroupEgress indicates an expected call of RevokeSecurityGroupEgress.
func (mr *MockECSMockRecorder) RevokeSecurityGroupEgress(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecurityGroupEgress", reflect.TypeOf((*MockECS)(nil).RevokeSecurityGroupEgress), request)
}

// ShareImageToAccount mocks base method.
func (m *MockECS) ShareImageToAccount(ctx context.Context, regionID, imageID, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareImageToAccount", ctx, regionID, imageID, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareImageToAccount indicates an expected call of ShareImageToAccount.
func (mr *MockECSMockRecorder) ShareImageToAccount(ctx, regionID, imageID, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareImageToAccount", reflect.TypeOf((*MockECS)(nil).ShareImageToAccount), ctx, regionID, imageID, accountID)
}

// TagResources mocks base method.
func (m *MockECS) TagResources(request *ecs.TagResourcesRequest) (*ecs.TagResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResources", request)
	ret0, _ := ret[0].(*ecs.TagResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResources indicates an expected call of TagResources.
func (mr *MockECSMockRecorder) TagResources(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResources", reflect.TypeOf((*MockECS)(nil).TagResources), request)
}

// UntagResources mocks base method.
func (m *MockECS) UntagResources(request *ecs.UntagResourcesRequest) (*ecs.UntagResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResources", request)
	ret0, _ := ret[0].(*ecs.UntagResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResources indicates an expected call of UntagResources.
func (mr *MockECSMockRecorder) UntagResources(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResources", reflect.TypeOf((*MockECS)(nil).UntagResources), request)
}

// MockSTS is a mock of STS interface.
type MockSTS struct {
	ctrl     *gomock.Controller
	recorder *MockSTSMockRecorder
	isgomock struct{}
}

// MockSTSMockRecorder is the mock recorder for MockSTS.
type MockSTSMockRecorder struct {
	mock *MockSTS
}

// NewMockSTS creates a new mock instance.
func NewMockSTS(ctrl *gomock.Controller) *MockSTS {
	mock := &MockSTS{ctrl: ctrl}
	mock.recorder = &MockSTSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSTS) EXPECT() *MockSTSMockRecorder {
	return m.recorder
}

// GetAccountIDFromCallerIdentity mocks base method.
func (m *MockSTS) GetAccountIDFromCallerIdentity(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountIDFromCallerIdentity", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIDFromCallerIdentity indicates an expected call of GetAccountIDFromCallerIdentity.
func (mr *MockSTSMockRecorder) GetAccountIDFromCallerIdentity(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIDFromCallerIdentity", reflect.TypeOf((*MockSTS)(nil).GetAccountIDFromCallerIdentity), ctx)
}

// MockSLB is a mock of SLB interface.
type MockSLB struct {
	ctrl     *gomock.Controller
	recorder *MockSLBMockRecorder
	isgomock struct{}
}

// MockSLBMockRecorder is the mock recorder for MockSLB.
type MockSLBMockRecorder struct {
	mock *MockSLB
}

// NewMockSLB creates a new mock instance.
func NewMockSLB(ctrl *gomock.Controller) *MockSLB {
	mock := &MockSLB{ctrl: ctrl}
	mock.recorder = &MockSLBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSLB) EXPECT() *MockSLBMockRecorder {
	return m.recorder
}

// DeleteLoadBalancer mocks base method.
func (m *MockSLB) DeleteLoadBalancer(ctx context.Context, region, loadBalancerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", ctx, region, loadBalancerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockSLBMockRecorder) DeleteLoadBalancer(ctx, region, loadBalancerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockSLB)(nil).DeleteLoadBalancer), ctx, region, loadBalancerID)
}

// GetFirstVServerGroupName mocks base method.
func (m *MockSLB) GetFirstVServerGroupName(ctx context.Context, region, loadBalancerID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstVServerGroupName", ctx, region, loadBalancerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstVServerGroupName indicates an expected call of GetFirstVServerGroupName.
func (mr *MockSLBMockRecorder) GetFirstVServerGroupName(ctx, region, loadBalancerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstVServerGroupName", reflect.TypeOf((*MockSLB)(nil).GetFirstVServerGroupName), ctx, region, loadBalancerID)
}

// GetLoadBalancerIDs mocks base method.
func (m *MockSLB) GetLoadBalancerIDs(ctx context.Context, region string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerIDs", ctx, region)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerIDs indicates an expected call of GetLoadBalancerIDs.
func (mr *MockSLBMockRecorder) GetLoadBalancerIDs(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerIDs", reflect.TypeOf((*MockSLB)(nil).GetLoadBalancerIDs), ctx, region)
}

// SetLoadBalancerDeleteProtection mocks base method.
func (m *MockSLB) SetLoadBalancerDeleteProtection(ctx context.Context, region, loadBalancerID string, protection bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoadBalancerDeleteProtection", ctx, region, loadBalancerID, protection)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLoadBalancerDeleteProtection indicates an expected call of SetLoadBalancerDeleteProtection.
func (mr *MockSLBMockRecorder) SetLoadBalancerDeleteProtection(ctx, region, loadBalancerID, protection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoadBalancerDeleteProtection", reflect.TypeOf((*MockSLB)(nil).SetLoadBalancerDeleteProtection), ctx, region, loadBalancerID, protection)
}

// MockVPC is a mock of VPC interface.
type MockVPC struct {
	ctrl     *gomock.Controller
	recorder *MockVPCMockRecorder
	isgomock struct{}
}

// MockVPCMockRecorder is the mock recorder for MockVPC.
type MockVPCMockRecorder struct {
	mock *MockVPC
}

// NewMockVPC creates a new mock instance.
func NewMockVPC(ctrl *gomock.Controller) *MockVPC {
	mock := &MockVPC{ctrl: ctrl}
	mock.recorder = &MockVPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPC) EXPECT() *MockVPCMockRecorder {
	return m.recorder
}

// AllocateEipAddress mocks base method.
func (m *MockVPC) AllocateEipAddress(request *vpc.AllocateEipAddressRequest) (*vpc.AllocateEipAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateEipAddress", request)
	ret0, _ := ret[0].(*vpc.AllocateEipAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateEipAddress indicates an expected call of AllocateEipAddress.
func (mr *MockVPCMockRecorder) AllocateEipAddress(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateEipAddress", reflect.TypeOf((*MockVPC)(nil).AllocateEipAddress), request)
}

// AssociateEipAddress mocks base method.
func (m *MockVPC) AssociateEipAddress(request *vpc.AssociateEipAddressRequest) (*vpc.AssociateEipAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateEipAddress", request)
	ret0, _ := ret[0].(*vpc.AssociateEipAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateEipAddress indicates an expected call of AssociateEipAddress.
func (mr *MockVPCMockRecorder) AssociateEipAddress(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateEipAddress", reflect.TypeOf((*MockVPC)(nil).AssociateEipAddress), request)
}

// CreateNatGateway mocks base method.
func (m *MockVPC) CreateNatGateway(request *vpc.CreateNatGatewayRequest) (*vpc.CreateNatGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNatGateway", request)
	ret0, _ := ret[0].(*vpc.CreateNatGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNatGateway indicates an expected call of CreateNatGateway.
func (mr *MockVPCMockRecorder) CreateNatGateway(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNatGateway", reflect.TypeOf((*MockVPC)(nil).CreateNatGateway), request)
}

// CreateSnatEntry mocks base method.
func (m *MockVPC) CreateSnatEntry(request *vpc.CreateSnatEntryRequest) (*vpc.CreateSnatEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnatEntry", request)
	ret0, _ := ret[0].(*vpc.CreateSnatEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnatEntry indicates an expected call of CreateSnatEntry.
func (mr *MockVPCMockRecorder) CreateSnatEntry(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnatEntry", reflect.TypeOf((*MockVPC)(nil).CreateSnatEntry), request)
}

// CreateVSwitch mocks base method.
func (m *MockVPC) CreateVSwitch(request *vpc.CreateVSwitchRequest) (*vpc.CreateVSwitchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVSwitch", request)
	ret0, _ := ret[0].(*vpc.CreateVSwitchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVSwitch indicates an expected call of CreateVSwitch.
func (mr *MockVPCMockRecorder) CreateVSwitch(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVSwitch", reflect.TypeOf((*MockVPC)(nil).CreateVSwitch), request)
}

// CreateVpc mocks base method.
func (m *MockVPC) CreateVpc(request *vpc.CreateVpcRequest) (*vpc.CreateVpcResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpc", request)
	ret0, _ := ret[0].(*vpc.CreateVpcResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpc indicates an expected call of CreateVpc.
func (mr *MockVPCMockRecorder) CreateVpc(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpc", reflect.TypeOf((*MockVPC)(nil).CreateVpc), request)
}

// DeleteNatGateway mocks base method.
func (m *MockVPC) DeleteNatGateway(request *vpc.DeleteNatGatewayRequest) (*vpc.DeleteNatGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNatGateway", request)
	ret0, _ := ret[0].(*vpc.DeleteNatGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNatGateway indicates an expected call of DeleteNatGateway.
func (mr *MockVPCMockRecorder) DeleteNatGateway(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNatGateway", reflect.TypeOf((*MockVPC)(nil).DeleteNatGateway), request)
}

// DeleteSnatEntry mocks base method.
func (m *MockVPC) DeleteSnatEntry(request *vpc.DeleteSnatEntryRequest) (*vpc.DeleteSnatEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnatEntry", request)
	ret0, _ := ret[0].(*vpc.DeleteSnatEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnatEntry indicates an expected call of DeleteSnatEntry.
func (mr *MockVPCMockRecorder) DeleteSnatEntry(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnatEntry", reflect.TypeOf((*MockVPC)(nil).DeleteSnatEntry), request)
}

// DeleteVSwitch mocks base method.
func (m *MockVPC) DeleteVSwitch(request *vpc.DeleteVSwitchRequest) (*vpc.DeleteVSwitchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVSwitch", request)
	ret0, _ := ret[0].(*vpc.DeleteVSwitchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVSwitch indicates an expected call of DeleteVSwitch.
func (mr *MockVPCMockRecorder) DeleteVSwitch(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVSwitch", reflect.TypeOf((*MockVPC)(nil).DeleteVSwitch), request)
}

// DeleteVpc mocks base method.
func (m *MockVPC) DeleteVpc(request *vpc.DeleteVpcRequest) (*vpc.DeleteVpcResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpc", request)
	ret0, _ := ret[0].(*vpc.DeleteVpcResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpc indicates an expected call of DeleteVpc.
func (mr *MockVPCMockRecorder) DeleteVpc(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpc", reflect.TypeOf((*MockVPC)(nil).DeleteVpc), request)
}

// DescribeEipAddresses mocks base method.
func (m *MockVPC) DescribeEipAddresses(request *vpc.DescribeEipAddressesRequest) (*vpc.DescribeEipAddressesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEipAddresses", request)
	ret0, _ := ret[0].(*vpc.DescribeEipAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEipAddresses indicates an expected call of DescribeEipAddresses.
func (mr *MockVPCMockRecorder) DescribeEipAddresses(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEipAddresses", reflect.TypeOf((*MockVPC)(nil).DescribeEipAddresses), request)
}

// DescribeNatGateways mocks base method.
func (m *MockVPC) DescribeNatGateways(request *vpc.DescribeNatGatewaysRequest) (*vpc.DescribeNatGatewaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNatGateways", request)
	ret0, _ := ret[0].(*vpc.DescribeNatGatewaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNatGateways indicates an expected call of DescribeNatGateways.
func (mr *MockVPCMockRecorder) DescribeNatGateways(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNatGateways", reflect.TypeOf((*MockVPC)(nil).DescribeNatGateways), request)
}

// DescribeSnatTableEntries mocks base method.
func (m *MockVPC) DescribeSnatTableEntries(request *vpc.DescribeSnatTableEntriesRequest) (*vpc.DescribeSnatTableEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSnatTableEntries", request)
	ret0, _ := ret[0].(*vpc.DescribeSnatTableEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnatTableEntries indicates an expected call of DescribeSnatTableEntries.
func (mr *MockVPCMockRecorder) DescribeSnatTableEntries(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnatTableEntries", reflect.TypeOf((*MockVPC)(nil).DescribeSnatTableEntries), request)
}

// DescribeVSwitches mocks base method.
func (m *MockVPC) DescribeVSwitches(request *vpc.DescribeVSwitchesRequest) (*vpc.DescribeVSwitchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVSwitches", request)
	ret0, _ := ret[0].(*vpc.DescribeVSwitchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVSwitches indicates an expected call of DescribeVSwitches.
func (mr *MockVPCMockRecorder) DescribeVSwitches(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVSwitches", reflect.TypeOf((*MockVPC)(nil).DescribeVSwitches), request)
}

// DescribeVpcs mocks base method.
func (m *MockVPC) DescribeVpcs(request *vpc.DescribeVpcsRequest) (*vpc.DescribeVpcsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVpcs", request)
	ret0, _ := ret[0].(*vpc.DescribeVpcsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcs indicates an expected call of DescribeVpcs.
func (mr *MockVPCMockRecorder) DescribeVpcs(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcs", reflect.TypeOf((*MockVPC)(nil).DescribeVpcs), request)
}

// FetchEIPInternetChargeType mocks base method.
func (m *MockVPC) FetchEIPInternetChargeType(ctx context.Context, natGateway *vpc.NatGateway, vpcID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEIPInternetChargeType", ctx, natGateway, vpcID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEIPInternetChargeType indicates an expected call of FetchEIPInternetChargeType.
func (mr *MockVPCMockRecorder) FetchEIPInternetChargeType(ctx, natGateway, vpcID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEIPInternetChargeType", reflect.TypeOf((*MockVPC)(nil).FetchEIPInternetChargeType), ctx, natGateway, vpcID)
}

// GetEIPWithID mocks base method.
func (m *MockVPC) GetEIPWithID(ctx context.Context, eipID string) ([]vpc.EipAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEIPWithID", ctx, eipID)
	ret0, _ := ret[0].([]vpc.EipAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEIPWithID indicates an expected call of GetEIPWithID.
func (mr *MockVPCMockRecorder) GetEIPWithID(ctx, eipID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEIPWithID", reflect.TypeOf((*MockVPC)(nil).GetEIPWithID), ctx, eipID)
}

// GetEnhanhcedNatGatewayAvailableZones mocks base method.
func (m *MockVPC) GetEnhanhcedNatGatewayAvailableZones(ctx context.Context, region string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnhanhcedNatGatewayAvailableZones", ctx, region)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnhanhcedNatGatewayAvailableZones indicates an expected call of GetEnhanhcedNatGatewayAvailableZones.
func (mr *MockVPCMockRecorder) GetEnhanhcedNatGatewayAvailableZones(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnhanhcedNatGatewayAvailableZones", reflect.TypeOf((*MockVPC)(nil).GetEnhanhcedNatGatewayAvailableZones), ctx, region)
}

// GetNatGatewaysWithVPCID mocks base method.
func (m *MockVPC) GetNatGatewaysWithVPCID(ctx context.Context, vpcID string) ([]vpc.NatGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNatGatewaysWithVPCID", ctx, vpcID)
	ret0, _ := ret[0].([]vpc.NatGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNatGatewaysWithVPCID indicates an expected call of GetNatGatewaysWithVPCID.
func (mr *MockVPCMockRecorder) GetNatGatewaysWithVPCID(ctx, vpcID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNatGatewaysWithVPCID", reflect.TypeOf((*MockVPC)(nil).GetNatGatewaysWithVPCID), ctx, vpcID)
}

// GetVPCInfo mocks base method.
func (m *MockVPC) GetVPCInfo(ctx context.Context, vpcID string) (*client.VPCInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCInfo", ctx, vpcID)
	ret0, _ := ret[0].(*client.VPCInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCInfo indicates an expected call of GetVPCInfo.
func (mr *MockVPCMockRecorder) GetVPCInfo(ctx, vpcID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCInfo", reflect.TypeOf((*MockVPC)(nil).GetVPCInfo), ctx, vpcID)
}

// GetVPCInfoByName mocks base method.
func (m *MockVPC) GetVPCInfoByName(name string) (*client.VPCInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCInfoByName", name)
	ret0, _ := ret[0].(*client.VPCInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCInfoByName indicates an expected call of GetVPCInfoByName.
func (mr *MockVPCMockRecorder) GetVPCInfoByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCInfoByName", reflect.TypeOf((*MockVPC)(nil).GetVPCInfoByName), name)
}

// GetVPCWithID mocks base method.
func (m *MockVPC) GetVPCWithID(ctx context.Context, vpcID string) ([]vpc.Vpc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCWithID", ctx, vpcID)
	ret0, _ := ret[0].([]vpc.Vpc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCWithID indicates an expected call of GetVPCWithID.
func (mr *MockVPCMockRecorder) GetVPCWithID(ctx, vpcID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCWithID", reflect.TypeOf((*MockVPC)(nil).GetVPCWithID), ctx, vpcID)
}

// GetVSwitchesInfoByID mocks base method.
func (m *MockVPC) GetVSwitchesInfoByID(name string) (*client.VSwitchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVSwitchesInfoByID", name)
	ret0, _ := ret[0].(*client.VSwitchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVSwitchesInfoByID indicates an expected call of GetVSwitchesInfoByID.
func (mr *MockVPCMockRecorder) GetVSwitchesInfoByID(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVSwitchesInfoByID", reflect.TypeOf((*MockVPC)(nil).GetVSwitchesInfoByID), name)
}

// ListEnhanhcedNatGatewayAvailableZones mocks base method.
func (m *MockVPC) ListEnhanhcedNatGatewayAvailableZones(request *vpc.ListEnhanhcedNatGatewayAvailableZonesRequest) (*vpc.ListEnhanhcedNatGatewayAvailableZonesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnhanhcedNatGatewayAvailableZones", request)
	ret0, _ := ret[0].(*vpc.ListEnhanhcedNatGatewayAvailableZonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnhanhcedNatGatewayAvailableZones indicates an expected call of ListEnhanhcedNatGatewayAvailableZones.
func (mr *MockVPCMockRecorder) ListEnhanhcedNatGatewayAvailableZones(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnhanhcedNatGatewayAvailableZones", reflect.TypeOf((*MockVPC)(nil).ListEnhanhcedNatGatewayAvailableZones), request)
}

// ListTagResources mocks base method.
func (m *MockVPC) ListTagResources(request *vpc.ListTagResourcesRequest) (*vpc.ListTagResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagResources", request)
	ret0, _ := ret[0].(*vpc.ListTagResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagResources indicates an expected call of ListTagResources.
func (mr *MockVPCMockRecorder) ListTagResources(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagResources", reflect.TypeOf((*MockVPC)(nil).ListTagResources), request)
}

// ModifyEipAddressAttribute mocks base method.
func (m *MockVPC) ModifyEipAddressAttribute(request *vpc.ModifyEipAddressAttributeRequest) (*vpc.ModifyEipAddressAttributeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEipAddressAttribute", request)
	ret0, _ := ret[0].(*vpc.ModifyEipAddressAttributeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEipAddressAttribute indicates an expected call of ModifyEipAddressAttribute.
func (mr *MockVPCMockRecorder) ModifyEipAddressAttribute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEipAddressAttribute", reflect.TypeOf((*MockVPC)(nil).ModifyEipAddressAttribute), request)
}

// ReleaseEipAddress mocks base method.
func (m *MockVPC) ReleaseEipAddress(request *vpc.ReleaseEipAddressRequest) (*vpc.ReleaseEipAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseEipAddress", request)
	ret0, _ := ret[0].(*vpc.ReleaseEipAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseEipAddress indicates an expected call of ReleaseEipAddress.
func (mr *MockVPCMockRecorder) ReleaseEipAddress(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseEipAddress", reflect.TypeOf((*MockVPC)(nil).ReleaseEipAddress), request)
}

// TagResources mocks base method.
func (m *MockVPC) TagResources(request *vpc.TagResourcesRequest) (*vpc.TagResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResources", request)
	ret0, _ := ret[0].(*vpc.TagResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResources indicates an expected call of TagResources.
func (mr *MockVPCMockRecorder) TagResources(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResources", reflect.TypeOf((*MockVPC)(nil).TagResources), request)
}

// UnTagResources mocks base method.
func (m *MockVPC) UnTagResources(request *vpc.UnTagResourcesRequest) (*vpc.UnTagResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnTagResources", request)
	ret0, _ := ret[0].(*vpc.UnTagResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnTagResources indicates an expected call of UnTagResources.
func (mr *MockVPCMockRecorder) UnTagResources(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnTagResources", reflect.TypeOf((*MockVPC)(nil).UnTagResources), request)
}

// UnassociateEipAddress mocks base method.
func (m *MockVPC) UnassociateEipAddress(request *vpc.UnassociateEipAddressRequest) (*vpc.UnassociateEipAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassociateEipAddress", request)
	ret0, _ := ret[0].(*vpc.UnassociateEipAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassociateEipAddress indicates an expected call of UnassociateEipAddress.
func (mr *MockVPCMockRecorder) UnassociateEipAddress(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassociateEipAddress", reflect.TypeOf((*MockVPC)(nil).UnassociateEipAddress), request)
}

// MockOSS is a mock of OSS interface.
type MockOSS struct {
	ctrl     *gomock.Controller
	recorder *MockOSSMockRecorder
	isgomock struct{}
}

// MockOSSMockRecorder is the mock recorder for MockOSS.
type MockOSSMockRecorder struct {
	mock *MockOSS
}

// NewMockOSS creates a new mock instance.
func NewMockOSS(ctrl *gomock.Controller) *MockOSS {
	mock := &MockOSS{ctrl: ctrl}
	mock.recorder = &MockOSSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSS) EXPECT() *MockOSSMockRecorder {
	return m.recorder
}

// CreateBucketIfNotExists mocks base method.
func (m *MockOSS) CreateBucketIfNotExists(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketIfNotExists", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucketIfNotExists indicates an expected call of CreateBucketIfNotExists.
func (mr *MockOSSMockRecorder) CreateBucketIfNotExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketIfNotExists", reflect.TypeOf((*MockOSS)(nil).CreateBucketIfNotExists), ctx, bucketName)
}

// DeleteBucketIfExists mocks base method.
func (m *MockOSS) DeleteBucketIfExists(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketIfExists", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucketIfExists indicates an expected call of DeleteBucketIfExists.
func (mr *MockOSSMockRecorder) DeleteBucketIfExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketIfExists", reflect.TypeOf((*MockOSS)(nil).DeleteBucketIfExists), ctx, bucketName)
}

// DeleteObjectsWithPrefix mocks base method.
func (m *MockOSS) DeleteObjectsWithPrefix(ctx context.Context, bucketName, prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectsWithPrefix", ctx, bucketName, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectsWithPrefix indicates an expected call of DeleteObjectsWithPrefix.
func (mr *MockOSSMockRecorder) DeleteObjectsWithPrefix(ctx, bucketName, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectsWithPrefix", reflect.TypeOf((*MockOSS)(nil).DeleteObjectsWithPrefix), ctx, bucketName, prefix)
}

// GetBucketInfo mocks base method.
func (m *MockOSS) GetBucketInfo(ctx context.Context, bucketName string) (*oss.BucketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketInfo", ctx, bucketName)
	ret0, _ := ret[0].(*oss.BucketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketInfo indicates an expected call of GetBucketInfo.
func (mr *MockOSSMockRecorder) GetBucketInfo(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketInfo", reflect.TypeOf((*MockOSS)(nil).GetBucketInfo), ctx, bucketName)
}

// MockRAM is a mock of RAM interface.
type MockRAM struct {
	ctrl     *gomock.Controller
	recorder *MockRAMMockRecorder
	isgomock struct{}
}

// MockRAMMockRecorder is the mock recorder for MockRAM.
type MockRAMMockRecorder struct {
	mock *MockRAM
}

// NewMockRAM creates a new mock instance.
func NewMockRAM(ctrl *gomock.Controller) *MockRAM {
	mock := &MockRAM{ctrl: ctrl}
	mock.recorder = &MockRAMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRAM) EXPECT() *MockRAMMockRecorder {
	return m.recorder
}

// CreateServiceLinkedRole mocks base method.
func (m *MockRAM) CreateServiceLinkedRole(regionID, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceLinkedRole", regionID, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServiceLinkedRole indicates an expected call of CreateServiceLinkedRole.
func (mr *MockRAMMockRecorder) CreateServiceLinkedRole(regionID, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceLinkedRole", reflect.TypeOf((*MockRAM)(nil).CreateServiceLinkedRole), regionID, serviceName)
}

// GetServiceLinkedRole mocks base method.
func (m *MockRAM) GetServiceLinkedRole(roleName string) (*resourcemanager.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceLinkedRole", roleName)
	ret0, _ := ret[0].(*resourcemanager.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceLinkedRole indicates an expected call of GetServiceLinkedRole.
func (mr *MockRAMMockRecorder) GetServiceLinkedRole(roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceLinkedRole", reflect.TypeOf((*MockRAM)(nil).GetServiceLinkedRole), roleName)
}

// MockROS is a mock of ROS interface.
type MockROS struct {
	ctrl     *gomock.Controller
	recorder *MockROSMockRecorder
	isgomock struct{}
}

// MockROSMockRecorder is the mock recorder for MockROS.
type MockROSMockRecorder struct {
	mock *MockROS
}

// NewMockROS creates a new mock instance.
func NewMockROS(ctrl *gomock.Controller) *MockROS {
	mock := &MockROS{ctrl: ctrl}
	mock.recorder = &MockROSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockROS) EXPECT() *MockROSMockRecorder {
	return m.recorder
}

// CreateStack mocks base method.
func (m *MockROS) CreateStack(request *ros.CreateStackRequest) (*ros.CreateStackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", request)
	ret0, _ := ret[0].(*ros.CreateStackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockROSMockRecorder) CreateStack(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockROS)(nil).CreateStack), request)
}

// DeleteStack mocks base method.
func (m *MockROS) DeleteStack(request *ros.DeleteStackRequest) (*ros.DeleteStackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStack", request)
	ret0, _ := ret[0].(*ros.DeleteStackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockROSMockRecorder) DeleteStack(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockROS)(nil).DeleteStack), request)
}

// GetStack mocks base method.
func (m *MockROS) GetStack(request *ros.GetStackRequest) (*ros.GetStackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStack", request)
	ret0, _ := ret[0].(*ros.GetStackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStack indicates an expected call of GetStack.
func (mr *MockROSMockRecorder) GetStack(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStack", reflect.TypeOf((*MockROS)(nil).GetStack), request)
}

// ListStacks mocks base method.
func (m *MockROS) ListStacks(request *ros.ListStacksRequest) (*ros.ListStacksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStacks", request)
	ret0, _ := ret[0].(*ros.ListStacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockROSMockRecorder) ListStacks(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockROS)(nil).ListStacks), request)
}
